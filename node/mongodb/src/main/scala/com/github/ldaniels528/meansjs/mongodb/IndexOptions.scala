package com.github.ldaniels528.meansjs.mongodb

import scala.scalajs.js
import scala.scalajs.js.annotation.ScalaJSDefined

/**
  * Index Options
  * @author lawrence.daniels@gmail.com
  */
@ScalaJSDefined
class IndexOptions extends js.Object {
  //	number | string	null	optional - The write concern.
  var w: js.UndefOr[js.Any] = _

  // number	null	optional - The write concern timeout.
  var wtimeout: js.UndefOr[Int] = _

  // boolean	false	optional - Specify a journal write concern.
  var j: js.UndefOr[Boolean] = _

  // boolean	false	optional - Creates an unique index.
  var unique: js.UndefOr[Boolean] = _

  // boolean	false	optional - Creates a sparse index.
  var sparse: js.UndefOr[Boolean] = _

  // boolean	false	optional - Creates the index in the background, yielding whenever possible.
  var background: js.UndefOr[Boolean] = _

  // boolean	false	optional - A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
  var dropDups: js.UndefOr[Boolean] = _

  // number	null	optional - For geospatial indexes set the lower bound for the co-ordinates.
  var min: js.UndefOr[Int] = _

  // number	null	optional - For geospatial indexes set the high bound for the co-ordinates.
  var max: js.UndefOr[Int] = _

  // number	null	optional - Specify the format version of the indexes.
  var v: js.UndefOr[Int] = _

  // number	null	optional - Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
  var expireAfterSeconds: js.UndefOr[Int] = _

  // number	null	optional - Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
  var name: js.UndefOr[Int] = _

}

/**
  * Index Options Companion
  * @author lawrence.daniels@gmail.com
  */
object IndexOptions {

  def apply(w: js.UndefOr[js.Any] = js.undefined,
            wtimeout: js.UndefOr[Int] = js.undefined,
            j: js.UndefOr[Boolean] = js.undefined,
            unique: js.UndefOr[Boolean] = js.undefined,
            sparse: js.UndefOr[Boolean] = js.undefined,
            background: js.UndefOr[Boolean] = js.undefined,
            dropDups: js.UndefOr[Boolean] = js.undefined,
            min: js.UndefOr[Int] = js.undefined,
            max: js.UndefOr[Int] = js.undefined,
            v: js.UndefOr[Int] = js.undefined,
            expireAfterSeconds: js.UndefOr[Int] = js.undefined,
            name: js.UndefOr[Int] = js.undefined) = {
    val options = new IndexOptions()
    options.w = w
    options.wtimeout = wtimeout
    options.j = j
    options.unique = unique
    options.sparse = sparse
    options.background = background
    options.dropDups = dropDups
    options.min = min
    options.max = max
    options.v = v
    options.expireAfterSeconds = expireAfterSeconds
    options.name = name
    options
  }

}